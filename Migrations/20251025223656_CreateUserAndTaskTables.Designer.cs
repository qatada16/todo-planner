// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using todo_planner.Data;

#nullable disable

namespace todo_planner.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251025223656_CreateUserAndTaskTables")]
    partial class CreateUserAndTaskTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("todo_planner.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Finish the semester project documentation",
                            DueDate = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Priority = 3,
                            Status = 2,
                            Title = "Complete project proposal",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 14, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Milk, eggs, bread, and fruits",
                            DueDate = new DateTime(2025, 10, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Priority = 1,
                            Status = 1,
                            Title = "Buy groceries",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Prepare for advanced programming test",
                            DueDate = new DateTime(2025, 10, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Priority = 2,
                            Status = 1,
                            Title = "Study for exams",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("todo_planner.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john@example.com",
                            Name = "John Doe",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane@example.com",
                            Name = "Jane Smith",
                            Password = "password123"
                        });
                });

            modelBuilder.Entity("todo_planner.Models.Task", b =>
                {
                    b.HasOne("todo_planner.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("todo_planner.Models.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
